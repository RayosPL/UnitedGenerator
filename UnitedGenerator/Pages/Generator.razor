@page "/"
@using UnitedGenerator.Data;
@using UnitedGenerator.Engine;
@using UnitedGenerator.Engine.Models;
@inject MyCollectionService myCollection;

<PageTitle>United Generator</PageTitle>

@if (!generated)
{
    <div class ="col-12 col-xl-6">
        <h4>Setup</h4>
        <NumberInput Text="Number of Heroes" Min="2" Max="6" @bind-Value="playerCount" />
    </div>

    <div class="row">
        <div class="mb-2">
            <div class="card col-12 col-xl-6">
                <div class="card-body">
                    <h5 class="card-title">Preferences</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Adjust how likely you want different events to happen.</h6>

                    <PercentageInput Text="Select a Hero Team" @bind-Value="selectTeamProbability" />
                    <PercentageInput Text="Select a Challenge" @bind-Value="selectChallengeProbability" />
                </div>
            </div>
        </div>

        <div class="mb-2">
            <div class="card col-12 col-xl-6">
                <div class="card-body">
                    <h5 class="card-title">Demo/Test Settings</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Theese settings are mostly used for test and demo purporses, but feel free to play around with them.</h6>

                    <BooleanInput Text="Only include Villain Teams" @bind-Value="onlyUseTeamVillains" />
                    <BooleanInput Text="Only include Villains with multiple games" @bind-Value="onlyUsePreGameVillains" />
                    <BooleanInput Text="Only include Anti Heroes" @bind-Value="onlyUseAntiHeroes" />
                    <BooleanInput Text="Only include Hazardous Location Challenge" @bind-Value="onlyUseHazardousChallenge" />
                    <BooleanInput Text="Only include Villains with Locations" @bind-Value="onlyVillainsWithLocations" />
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-primary m-2" @onclick="() => GenerateGame(false)">Generate Normal Game</button>
    <button class="btn btn-primary m-2" @onclick="() => GenerateGame(true)">Generate Team vs Team Game</button>
}

@if(games.Length == 0 && generated)
{
    <div>No possible game, please change your options and try again!</div>
}

<Games CurrentGames="games" />

@if (generated)
{
    <button class="btn btn-primary m-2" @onclick="GenerateGame">Generate Again</button>
    <button class="btn btn-primary m-2" @onclick="Reset">Change Setup</button>
}

@code {
    private GameRandomizer? random;
    private GameSetup[] games = new GameSetup[0];

    private int playerCount = 4;
    private int selectTeamProbability = 5;
    private int selectChallengeProbability = 20;
    private bool onlyUseTeamVillains = false;
    private bool onlyUsePreGameVillains = false;
    private bool onlyUseAntiHeroes = false;
    private bool onlyUseHazardousChallenge = false;
    private bool onlyVillainsWithLocations = false;
    private bool teamMode = false;
    private bool generated = false;

    protected override void OnInitialized()
    {
        random = new GameRandomizer(DataFactory.Seasons, myCollection);
    }

    private void GenerateGame(bool isTeamMode)
    {
        teamMode = isTeamMode;
        GenerateGame();
    }

    private void GenerateGame()
    {
        if (random != null)
        {
            games = random.Generate(new GenerationConfiguration()
                {
                    PlayerCount = playerCount,
                    TeamVsTeamMode = teamMode,
                    SelectTeamProbability = selectTeamProbability,
                    SelectChallengeProbability = selectChallengeProbability,
                    OnlyVillainTeams = onlyUseTeamVillains,
                    OnlyVillainsWithPreGames = onlyUsePreGameVillains,
                    OnlyUseAntiHeroes = onlyUseAntiHeroes,
                    OnlyHazardousLocationsChallenge = onlyUseHazardousChallenge,
                    OnlyVillainsWithLocations = onlyVillainsWithLocations
                });

            generated = true;
        }
    }

    private void Reset()
    {
        games = new GameSetup[0];
        generated = false;
    }
}
