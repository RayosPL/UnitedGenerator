@using UnitedGenerator.Common.Interfaces;
@if (Villain != null)
{
    @if (Villain.SubVillains.Any())
    {
        <div>
            Team members:
            <ul>
                @foreach (var sub in Villain.SubVillains)
                {
                    <li>@sub.ToItemString(Villain)</li>
                }
            </ul>
        </div>
    }

    @if (!Villain.IncludeInRandomVillainSelection)
    {
        <p>Do not include in random selection.</p>
    }

    @if (!Villain.CanBeVillainInTeamVsTeamMode)
    {
        <p>Can't be Villain in Team vs Team games.</p>
    }

    @if (Villain.DisableChallenges)
    {
        <p>Never include Challenges.</p>
    }

    @if (Villain.ExcludeLocationsWhereHeroCanDrawCards)
    {
        <p>Exclude Locations where Heroes can draw cards.</p>
    }

    @if (Villain.MaximumLocationsWhereStartingThugsAregreatherThanCivilians.HasValue)
    {
        <p>Maximum @Villain.MaximumLocationsWhereStartingThugsAregreatherThanCivilians Locations where starting number of Thugs are greather than Civilians.</p>
    }

    @if (Villain.PreGamesCount > 0)
    {
        <p>Play @Villain.PreGamesCount game(s) first.</p>            
    }

    @if (Villain.OnlyPlayPreGames)
    { 
        <p>Do not play agains this Villain (only the pre-games).</p>
    }

    @if (Villain.PreGameCandidateVillains.Any())
    {
        <div>
            Select Villains between:
            <ul>
                @foreach (var sub in Villain.PreGameCandidateVillains)
                {
                    <li>@sub.ToItemString(Villain)</li>
                }
            </ul>
        </div>
    }

    @if (Villain.ExcludeHeroes.Any())
    {
        <div>
            Do not use Heroes:
            <ul>
                @foreach (var hero in Villain.ExcludeHeroes)
                {
                    <li>@hero.ToItemString(Villain)</li>
                }
            </ul>
        </div>
    }

    @if (Villain.ReuseHeroesFromFirstPreGame)
    {
        <p>Reuse same Heroes in all games.</p>
    }

    @if (Villain.AdditionalHeroGroups.Any())
    {
        <div>
            Generate additional Hero groups:
            <ul>
                @foreach (var group in Villain.AdditionalHeroGroups)
                {
                    <li>@group.GroupName (@group.Description)</li>
                }
            </ul>
        </div>
    }

    @if (Villain.AssignedLocations.Any())
    {
        <div>
            Include Locations:
            <ul>
                @foreach (var location in Villain.AssignedLocations)
                {
                    <li>
                        @location.Location.ToItemString(Villain)
                    
                        @if (location.Placement.HasValue)
                        {
                            <ul>
                                <li>Placement @location.Placement</li>
                            </ul>
                        }
                    </li>
                }
            </ul>
        </div>
    }

    @if (Villain.DataComments.Any())
    {
        <div>
            Comments:
            <ul>
            @foreach (var comment in Villain.DataComments)
            {
                <li>@comment</li>
            }
            </ul>
        </div>
    }
}

@code {
    [Parameter]
    public IVillain? Villain { get; set; }
}
