@using Blazored.LocalStorage;
@inject ISyncLocalStorageService storage;

<div class="row mb-3">
    <label class="col-8 col-form-label" for="@id">@Text</label>
    <div class="col-4">
        <input min="@Min" max="@Max" type="number" class="form-control" style="text-align:right;" @bind="Value" id="@id" />
    </div>
</div>

@code {
    private int _value;

    private string id = Guid.NewGuid().ToString();
    private bool initialized = false;

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public int Max { get; set; }

    [Parameter]
    public int Min { get; set; }

    [Parameter]
    public string? StorageKey { get; set; }

    [Parameter]
    public int Value 
    { 
        get
        {
            return _value;
        }
        set
        {
            value = Math.Min(value, Max);
            value = Math.Max(value, Min);

            if (_value == value)
                return;

            _value = value;
            ValueChanged.InvokeAsync(value);

            if (StorageKey != null && initialized)
            {
                storage.SetItem(StorageKey, value);
            }
        }
    }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (StorageKey != null)
        {
            if (storage.ContainKey(StorageKey))
            {
                Value = storage.GetItem<int>(StorageKey);
            }

            initialized = true;
        }
    }
}
