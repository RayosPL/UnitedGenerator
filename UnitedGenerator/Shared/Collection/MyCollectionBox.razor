@inject MyCollectionService myCollection;
@using UnitedGenerator.Common.Interfaces;
@if (Box != null)
{
    <div class="pb-5 pt-2">

        <div class="row">

            <div class="col-9 col-md-4 col-lg-3">
                <img class="img-fluid m-2" src="@imgUrl" />
            </div>

            <div class="col-12 col-md-8 col-lg-9">
                <div class="row mt-2">
                    <div class="col-12">
                        <h1><span class="badge @BadgeClass">@Status</span></h1>
                    </div>
                    <div class="col-12">
                        <h2>@Box.Name</h2>
                    </div>
                    <div class="col-12">
                        <h4>@Box.Season.Name</h4>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="btn-group col-12 col-lg-10 col-xl-8">
                        <button class="btn btn-info" @onclick="Toggle"><span class="oi @ToogleText" aria-hidden="true"></span> Content</button>
                        <button class="btn btn-outline-primary" @onclick="() => SetState(Box, true)">Include All</button>
                        <button class="btn btn-outline-primary" @onclick="() => SetState(Box, false)">Exclude All</button>
                    </div>
                </div>
            </div>

            @if (showItems)
            {
                <div class="col-12">
                    <div class="row g-2 mb-5 row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 row-cols-xl-6">

                        @foreach (var item in Box.AllItems)
                        {
                            <BoxItemCard Item="item" ShowBoxInfo="false">
                                <div class="d-flex justify-content-center">
                                    <MyCollectionBoxItem Item="item" SelectionChanged="() => StateHasChanged()" />
                                </div>
                            </BoxItemCard>
                        }
                    </div>
                </div>
            }

        </div>
    </div>
}

@code {

    [Parameter]
    public IBox? Box { get; set; }

    private bool showItems = false;
    private string? imgUrl;

    private string ToogleText => showItems ? "oi-caret-top" : "oi-caret-bottom";

    protected override void OnParametersSet()
    {
        imgUrl = $"./images/{Box?.Season.Code}/{Box?.Code}/Box.jpg";
    }

    private string Status
    {
        get
        {
            bool? state = null;

            if (Box != null)
            {
                state = myCollection.IsBoxIncluded(Box);
            }

            switch(state)
            {
                case true: return "All included";
                case false: return "All excluded";
                case null: return "Some parts included";
            }
        }
    }

    private string BadgeClass
    {
        get
        {
            bool? state = null;

            if (Box != null)
            {
                state = myCollection.IsBoxIncluded(Box);
            }

            switch (state)
            {
                case true: return "bg-success";
                case false: return "bg-danger";
                case null: return "bg-warning";
            }
        }
    }

    private void SetState(IBox box, bool include)
    {
        myCollection.SetIncluded(box, include);
    }

    private void Toggle()
    {
        showItems = !showItems;
    }
}
